@page "/register"
@using ExpensesSathi.Models
@using ExpensesSathi.Services
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="register-container">
    <div class="glass-card">
        <div class="register-header">
            <div class="logo-circle">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                    <circle cx="8.5" cy="7" r="4"></circle>
                    <line x1="20" y1="8" x2="20" y2="14"></line>
                    <line x1="23" y1="11" x2="17" y2="11"></line>
                </svg>
            </div>
            <h1>Create Account</h1>
            <p>Join ExpensesSathi to track your expenses</p>
        </div>

        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="input-group">
                <div class="input-field">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                    </svg>
                    <InputText @bind-Value="registerModel.Username" placeholder="Username" class="glass-input" />
                </div>

                <div class="input-field">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                    <InputText @bind-Value="registerModel.Password" type="@passwordInputType" placeholder="Password" class="glass-input" />
                    <button type="button" @onclick="TogglePasswordVisibility" class="password-toggle">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            @if (showPassword)
                            {
                                <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                                <line x1="1" y1="1" x2="23" y2="23"></line>
                            }
                            else
                            {
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            }
                        </svg>
                    </button>
                </div>



                <div class="terms-agreement">
                    <label class="checkbox-container">
                        <input type="checkbox" />
                        <span class="checkmark"></span>
                        <span>I agree to the <a href="#" class="terms-link">Terms of Service</a> and <a href="#" class="terms-link">Privacy Policy</a></span>
                    </label>
                </div>

                <button type="submit" class="register-button">
                    Create Account
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M5 12h14"></path>
                        <path d="M12 5l7 7-7 7"></path>
                    </svg>
                </button>
            </div>
        </EditForm>

        <div class="login-link">
            Already have an account? <button @onclick="NavigateToLogin" class="login-button">Sign In</button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="status-message @(message.Contains("successful") ? "success" : "error")">
                @message
            </div>
        }
    </div>

    <div class="blob blob-1"></div>
    <div class="blob blob-2"></div>
    <div class="blob blob-3"></div>
</div>

<style>
    /* Base Styles */
    :root {
        --primary-color: #6366f1;
        --primary-light: #818cf8;
        --primary-dark: #4f46e5;
        --text-color: #f8fafc;
        --text-secondary: #94a3b8;
        --glass-bg: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.2);
        --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        --success-color: #10b981;
        --error-color: #ef4444;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    /* Container Styles */
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #1e293b, #0f172a);
        position: relative;
        overflow: hidden;
        padding: 20px;
    }

    /* Glass Card */
    .glass-card {
        width: 100%;
        max-width: 450px;
        padding: 40px 30px;
        background: var(--glass-bg);
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
        border-radius: 20px;
        border: 1px solid var(--glass-border);
        box-shadow: var(--glass-shadow);
        z-index: 10;
        position: relative;
    }

    /* Header Styles */
    .register-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .logo-circle {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        box-shadow: 0 4px 20px rgba(99, 102, 241, 0.3);
    }

    .logo-circle svg {
        width: 36px;
        height: 36px;
        stroke: white;
    }

    .register-header h1 {
        color: var(--text-color);
        font-size: 28px;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .register-header p {
        color: var(--text-secondary);
        font-size: 14px;
        font-weight: 400;
    }

    /* Input Styles */
    .input-group {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 25px;
    }

    .input-field {
        position: relative;
        display: flex;
        align-items: center;
    }

    .input-field svg {
        position: absolute;
        left: 16px;
        color: var(--text-secondary);
    }

    .glass-input {
        width: 100%;
        padding: 14px 20px 14px 48px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid var(--glass-border);
        border-radius: 12px;
        color: var(--text-color);
        font-size: 15px;
        transition: all 0.3s ease;
    }

    .glass-input::placeholder {
        color: var(--text-secondary);
    }

    .glass-input:focus {
        outline: none;
        border-color: var(--primary-light);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
    }

    .password-toggle {
        position: absolute;
        right: 16px;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--text-secondary);
        transition: color 0.3s;
    }

    .password-toggle:hover {
        color: var(--text-color);
    }

    /* Terms Agreement */
    .terms-agreement {
        margin: 10px 0;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        position: relative;
        padding-left: 30px;
        cursor: pointer;
        color: var(--text-secondary);
        font-size: 14px;
        user-select: none;
    }

    .checkbox-container input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    .checkmark {
        position: absolute;
        left: 0;
        height: 20px;
        width: 20px;
        background-color: rgba(255, 255, 255, 0.05);
        border: 1px solid var(--glass-border);
        border-radius: 5px;
        transition: all 0.3s;
    }

    .checkbox-container:hover input ~ .checkmark {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .checkbox-container input:checked ~ .checkmark {
        background-color: var(--primary-color);
        border-color: var(--primary-dark);
    }

    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    .checkbox-container input:checked ~ .checkmark:after {
        display: block;
    }

    .checkbox-container .checkmark:after {
        left: 7px;
        top: 3px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    .terms-link {
        color: var(--primary-light);
        text-decoration: none;
        transition: color 0.3s;
    }

    .terms-link:hover {
        color: var(--text-color);
        text-decoration: underline;
    }

    /* Button Styles */
    .register-button {
        width: 100%;
        padding: 14px;
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        color: white;
        border: none;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        transition: all 0.3s ease;
        margin-top: 10px;
    }

    .register-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(99, 102, 241, 0.3);
    }

    .register-button svg {
        transition: transform 0.3s;
    }

    .register-button:hover svg {
        transform: translateX(4px);
    }

    /* Login Link */
    .login-link {
        text-align: center;
        color: var(--text-secondary);
        font-size: 14px;
        margin-top: 20px;
    }

    .login-button {
        background: none;
        border: none;
        color: var(--primary-light);
        font-weight: 600;
        cursor: pointer;
        transition: color 0.3s;
    }

    .login-button:hover {
        color: var(--text-color);
        text-decoration: underline;
    }

    /* Status Message */
    .status-message {
        padding: 12px 16px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        text-align: center;
        margin-top: 20px;
    }

    .status-message.success {
        background-color: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .status-message.error {
        background-color: rgba(239, 68, 68, 0.1);
        color: var(--error-color);
        border: 1px solid rgba(239, 68, 68, 0.2);
    }

    /* Validation Styles */
    .validation-summary {
        color: var(--error-color);
        font-size: 14px;
        background-color: rgba(239, 68, 68, 0.1);
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid rgba(239, 68, 68, 0.2);
        list-style-type: none;
    }

    /* Blob Background Elements */
    .blob {
        position: absolute;
        border-radius: 50%;
        filter: blur(60px);
        opacity: 0.3;
        z-index: 1;
    }

    .blob-1 {
        width: 300px;
        height: 300px;
        background: linear-gradient(135deg, var(--primary-color), #a855f7);
        top: -100px;
        left: -100px;
        animation: float 15s infinite ease-in-out;
    }

    .blob-2 {
        width: 400px;
        height: 400px;
        background: linear-gradient(135deg, #f97316, #ec4899);
        bottom: -150px;
        right: -100px;
        animation: float 18s infinite ease-in-out reverse;
    }

    .blob-3 {
        width: 250px;
        height: 250px;
        background: linear-gradient(135deg, #3b82f6, #10b981);
        bottom: 50px;
        left: 50px;
        animation: float 12s infinite ease-in-out;
    }

    /* Animations */
    @@keyframes float {
        0%, 100% {
            transform: translate(0, 0);
        }
        50% {
            transform: translate(30px, 30px);
        }
    }

    /* Responsive Adjustments */
    @@media (max-width: 480px) {
        .glass-card {
            padding: 30px 20px;
        }

        .register-header h1 {
            font-size: 24px;
        }

        .logo-circle {
            width: 70px;
            height: 70px;
        }
    }
</style>

@code {
    private UserModel registerModel = new UserModel();
    private string message = string.Empty;
    private bool showPassword = false;
    private string passwordInputType => showPassword ? "text" : "password";

    private async Task HandleRegister()
    {
        bool isRegistered = await UserService.RegisterUserAsync(registerModel);

        if (isRegistered)
        {
            message = "Registration successful! Redirecting to login...";
            await Task.Delay(1000); // Brief delay for user to see success message
            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = "Username already exists. Please choose another.";
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/");
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}