@page "/debts"
@using ExpensesSathi.Services
@using ExpensesSathi.Models
@inject DebtService DebtService
@implements IDisposable

<div class="debt-wrapper">
    <!-- Top Bar -->
    <div class="top-bar">
        <div class="title-section">
            <svg class="title-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <path d="M16 10a4 4 0 0 1-8 0"></path>
            </svg>
            <h1>Debt Overview</h1>
        </div>
        <button @onclick="OpenAddDebt" class="action-btn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 5v14m7-7H5"></path>
            </svg>
            New Debt
        </button>
    </div>

    <!-- Filter Panel -->
    <div class="filter-panel">
        <div class="filter-group">
            <label>Search Description</label>
            <div class="input-wrapper">
                <input type="text" @bind="SearchTerm" @oninput="ApplyFilters" placeholder="Enter description..." />
                <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>
        </div>
        <div class="filter-group">
            <label>Status</label>
            <select @bind="StatusFilter" @bind:after="ApplyFilters">
                <option value="">All</option>
                <option value="pending">Pending</option>
                <option value="cleared">Cleared</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Due Date</label>
            <input type="date" @bind="DueDateFilter" @bind:after="ApplyFilters" />
        </div>
    </div>

    <!-- Debt List -->
    <div class="debt-list-container">
        @if (FilteredDebts.Any())
        {
            @foreach (var debt in FilteredDebts)
            {
                <div class="debt-card @(debt.Status == "Pending" ? "pending" : "cleared")">
                    <div class="debt-info">
                        <div class="debt-header">
                            <span class="debt-id">ID: @debt.Id</span>
                            <span class="debt-date">Due: @debt.DueDate.ToString("MMM dd, yyyy")</span>
                            @if (debt.ClearedDate.HasValue)
                            {
                                <span class="debt-cleared-date">Cleared: @debt.ClearedDate.Value.ToString("MMM dd, yyyy")</span>
                            }
                        </div>
                        <span class="debt-title">@debt.Description</span>
                        @if (!string.IsNullOrWhiteSpace(debt.Notes))
                        {
                            <span class="debt-notes">Notes: @debt.Notes</span>
                        }
                    </div>
                    <div class="debt-amount">@debt.Amount.ToString("C")</div>
                    <div class="debt-status">
                        <span class="@(debt.Status == "Pending" ? "status-pending" : "status-cleared")">@debt.Status</span>
                    </div>
                    <div class="debt-actions">
                        @if (debt.Status == "Pending")
                        {
                            <button @onclick="() => MarkCleared(debt)" class="action-btn small">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="20 6 9 17 4 12"></polyline>
                                </svg>
                                Clear
                            </button>
                        }
                        <button @onclick="() => EditDebt(debt)" class="action-btn small">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                            Edit
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-debts">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                </svg>
                <p>No debts found</p>
            </div>
        }
    </div>

    <!-- Modal for Add/Edit -->
    @if (ShowModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <button @onclick="CloseModal" class="close-btn">&times;</button>
                <div class="modal-header">
                    <h2>@(IsEditing ? "Edit Debt" : "Add New Debt")</h2>
                </div>
                <form @onsubmit="SaveDebt" class="modal-form">
                    <div class="form-field">
                        <label>Amount</label>
                        <input type="number" @bind="CurrentDebt.Amount" required />
                    </div>
                    <div class="form-field">
                        <label>Description</label>
                        <input type="text" @bind="CurrentDebt.Description" required />
                    </div>
                    <div class="form-field">
                        <label>Due Date</label>
                        <input type="date" @bind="CurrentDebt.DueDate" required />
                    </div>
                    <div class="form-field">
                        <label>Notes</label>
                        <textarea @bind="CurrentDebt.Notes"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="button" @onclick="CloseModal" class="cancel-btn">Cancel</button>
                        <button type="submit" class="save-btn">Save</button>
                    </div>
                </form>
            </div>
        </div>
    }
</div>

@code {
    private List<DebtModel> DebtsList { get; set; } = new();
    private List<DebtModel> FilteredDebts { get; set; } = new();
    private string SearchTerm { get; set; } = "";
    private string StatusFilter { get; set; } = "";
    private DateTime? DueDateFilter { get; set; }
    private bool ShowModal { get; set; } = false;
    private bool IsEditing { get; set; } = false;
    private DebtModel CurrentDebt { get; set; } = new();

    protected override void OnInitialized()
    {
        DebtsList = DebtService.GetAllDebts();
        FilteredDebts = DebtsList.ToList();
        DebtService.OnChange += StateHasChanged;
    }

    private void ApplyFilters()
    {
        FilteredDebts = DebtsList
            .Where(d => (string.IsNullOrWhiteSpace(SearchTerm) || d.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrWhiteSpace(StatusFilter) || d.Status == StatusFilter) &&
                        (!DueDateFilter.HasValue || d.DueDate.Date == DueDateFilter.Value.Date))
            .ToList();
    }

    private void OpenAddDebt()
    {
        IsEditing = false;
        CurrentDebt = new DebtModel { Status = "Pending" };
        ShowModal = true;
    }

    private void EditDebt(DebtModel debt)
    {
        IsEditing = true;
        CurrentDebt = new DebtModel
        {
            Id = debt.Id,
            Amount = debt.Amount,
            Description = debt.Description,
            DueDate = debt.DueDate,
            Notes = debt.Notes,
            Status = debt.Status
        };
        ShowModal = true;
    }

    private void SaveDebt()
    {
        if (IsEditing)
        {
            DebtService.UpdateDebt(CurrentDebt);
        }
        else
        {
            DebtService.AddDebt(CurrentDebt);
        }
        DebtsList = DebtService.GetAllDebts();
        ApplyFilters();
        CloseModal();
    }

    private void MarkCleared(DebtModel debt)
    {
        debt.Status = "Cleared";
        DebtService.UpdateDebt(debt);
        DebtsList = DebtService.GetAllDebts();
        ApplyFilters();
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    public void Dispose()
    {
        DebtService.OnChange -= StateHasChanged;
    }
}

<style>
    /* Base Styles */
    :root {
        --primary-color: #6366f1;
        --primary-light: #818cf8;
        --primary-dark: #4f46e5;
        --text-color: #f8fafc;
        --text-secondary: #94a3b8;
        --glass-bg: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.2);
        --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        --success-color: #10b981;
        --error-color: #ef4444;
    }

    .debt-wrapper {
        padding: 24px;
        background: linear-gradient(135deg, #1e293b, #0f172a);
        min-height: calc(100vh - 70px);
        position: relative;
    }

    /* Top Bar */
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .title-section {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .title-icon {
        width: 24px;
        height: 24px;
        stroke: var(--primary-light);
    }

    h1 {
        font-size: 24px;
        color: var(--text-color);
        font-weight: 600;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 6px;
        padding: 8px 12px;
        color: var(--text-color);
        cursor: pointer;
        transition: all 0.3s;
    }

    .action-btn:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .action-btn svg {
        width: 16px;
        height: 16px;
    }

    /* Filter Panel */
    .filter-panel {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    .filter-group {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .filter-group label {
        color: var(--text-secondary);
        font-size: 14px;
    }

    .input-wrapper {
        position: relative;
    }

    .input-wrapper input {
        width: 100%;
        padding: 8px 12px 8px 30px;
        border: 1px solid var(--glass-border);
        border-radius: 6px;
        background: var(--glass-bg);
        color: var(--text-color);
    }

    .search-icon {
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        width: 16px;
        height: 16px;
    }

    .filter-group select, .filter-group input[type="date"] {
        padding: 8px;
        border: 1px solid var(--glass-border);
        border-radius: 6px;
        background: var(--glass-bg);
        color: var(--text-color);
    }

    /* Debt List */
    .debt-list-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .debt-card {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr;
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 8px;
        padding: 12px;
        transition: transform 0.3s;
    }

    .debt-card:hover {
        transform: translateY(-3px);
    }

    .debt-card.pending {
        background: rgba(239, 68, 68, 0.1);
    }

    .debt-card.cleared {
        background: rgba(16, 185, 129, 0.1);
    }

    .debt-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .debt-header {
        display: flex;
        gap: 8px;
        align-items: center;
        margin-bottom: 4px;
        flex-wrap: wrap;
    }

    .debt-id {
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 4px;
        background: rgba(99, 102, 241, 0.2);
        color: #6366f1;
        font-weight: 600;
    }

    .debt-date {
        font-size: 12px;
        color: var(--text-color);
        opacity: 0.8;
    }

    .debt-cleared-date {
        font-size: 12px;
        padding: 2px 6px;
        border-radius: 4px;
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
        font-weight: 500;
    }

    .debt-title {
        font-size: 14px;
        color: var(--text-color);
        font-weight: 500;
    }

    .debt-notes {
        font-size: 12px;
        color: var(--text-color);
        opacity: 0.7;
        font-style: italic;
    }

    .debt-amount {
        font-size: 14px;
        font-weight: 600;
        color: var(--text-color);
        text-align: right;
    }

    .debt-status {
        text-align: center;
    }

    .status-pending {
        background: rgba(239, 68, 68, 0.2);
        color: var(--error-color);
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
    }

    .status-cleared {
        background: rgba(16, 185, 129, 0.2);
        color: var(--success-color);
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
    }

    .debt-actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
    }

    .action-btn.small {
        padding: 6px 10px;
    }

    .no-debts {
        text-align: center;
        padding: 20px;
        color: var(--text-secondary);
    }

    .no-debts svg {
        width: 40px;
        height: 40px;
    }

    .no-debts p {
        margin-top: 10px;
    }

    /* Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 10px;
        padding: 20px;
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        border: none;
        background: none;
        color: var(--text-color);
        font-size: 20px;
        cursor: pointer;
    }

    .modal-header h2 {
        color: var(--text-color);
        font-size: 18px;
        margin-bottom: 15px;
    }

    .modal-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .form-field {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .form-field label {
        color: var(--text-secondary);
        font-size: 14px;
    }

    .form-field input, .form-field textarea {
        padding: 8px;
        border: 1px solid var(--glass-border);
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.05);
        color: var(--text-color);
    }

    .form-field textarea {
        min-height: 80px;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .cancel-btn, .save-btn {
        padding: 8px 15px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    .cancel-btn {
        background: rgba(239, 68, 68, 0.1);
        color: var(--error-color);
    }

    .save-btn {
        background: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
    }

    /* Responsive */
    @@media (max-width: 768px) {
    .debt-wrapper {
        margin-left: 0;
        padding: 15px;
    }

    .top-bar {
        flex-direction: column;
        gap: 15px;
    }

    .filter-panel {
        flex-direction: column;
    }

    .debt-card {
        grid-template-columns: 2fr 1fr 1fr;
    }

    .debt-actions {
        grid-column: span 2;
        justify-content: flex-start;
    }
    }
</style>