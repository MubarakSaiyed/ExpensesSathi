@page "/dashboard"
@using ExpensesSathi.Services
@using ExpensesSathi.Models
@inject TransactionService TransactionService
@inject DebtService DebtService

<div class="main-content">
    <!-- Header Section -->
    <header class="main-header">
        <div class="header-left">
            <svg class="header-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
            <h2>Overview</h2>
        </div>
        <div class="header-right">
            <div class="date-picker">
                <input type="date" @bind="StartDate" @bind:after="UpdateData" />
                <input type="date" @bind="EndDate" @bind:after="UpdateData" />
            </div>
        </div>
    </header>

    <!-- Stats Overview -->
    <section class="stats-overview">
        <div class="stat-card">
            <div class="stat-title">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="19" x2="12" y2="5"></line>
                    <polygon points="19 12 12 19 5 12"></polygon>
                </svg>
                <span>Balance</span>
            </div>
            <div class="stat-value">@Balance.ToString("C")</div>
            <div class="stat-trend positive">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="7" y1="17" x2="17" y2="7"></line>
                    <polyline points="7 7 17 7 17 17"></polyline>
                </svg>
                <span>5% up</span>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-title">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <polygon points="19 12 12 19 5 12"></polygon>
                </svg>
                <span>Inflows</span>
            </div>
            <div class="stat-value">@Inflows.ToString("C")</div>
            <div class="stat-trend positive">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="7" y1="17" x2="17" y2="7"></line>
                    <polyline points="7 7 17 7 17 17"></polyline>
                </svg>
                <span>3% up</span>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-title">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="19" x2="12" y2="5"></line>
                    <polygon points="19 12 12 19 5 12"></polygon>
                </svg>
                <span>Outflows</span>
            </div>
            <div class="stat-value">@Outflows.ToString("C")</div>
            <div class="stat-trend negative">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="17" y1="7" x2="7" y2="17"></line>
                    <polyline points="17 17 7 17 7 7"></polyline>
                </svg>
                <span>2% down</span>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-title">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
                </svg>
                <span>Pending Debts</span>
            </div>
            <div class="stat-value">@Debts.ToString("C")</div>
            <div class="stat-trend negative">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="17" y1="7" x2="7" y2="17"></line>
                    <polyline points="17 17 7 17 7 7"></polyline>
                </svg>
                <span>1% down</span>
            </div>
        </div>
    </section>

    <!-- Main Panels -->
    <section class="main-panels">
        <div class="panel recent-transactions">
            <div class="panel-header">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="8" y1="6" x2="21" y2="6"></line>
                    <line x1="8" y1="12" x2="21" y2="12"></line>
                    <line x1="8" y1="18" x2="21" y2="18"></line>
                    <line x1="3" y1="6" x2="3.01" y2="6"></line>
                    <line x1="3" y1="12" x2="3.01" y2="12"></line>
                    <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
                <h3>Recent Transactions</h3>
                <a href="/transactions" class="view-more">View All</a>
            </div>
            @if (Transactions.Any())
            {
                <div class="transaction-list">
                    @foreach (var trans in Transactions.Take(5))
                    {
                        <div class="transaction-item @(trans.Type == "credit" ? "income" : "expense")">
                            <span class="trans-type">@(trans.Type == "credit" ? "In" : "Out")</span>
                            <span class="trans-desc">@trans.Description</span>
                            <span class="trans-amount">@(trans.Type == "credit" ? "+" : "-")@trans.Amount.ToString("C")</span>
                            <span class="trans-date">@trans.Date.ToString("MMM dd")</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-data">No transactions yet</div>
            }
        </div>
        <div class="panel pending-debts">
            <div class="panel-header">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                    <line x1="16" y1="13" x2="8" y2="13"></line>
                    <line x1="16" y1="17" x2="8" y2="17"></line>
                    <polyline points="10 9 9 9 8 9"></polyline>
                </svg>
                <h3>Pending Debts</h3>
                <a href="/debts" class="view-more">View All</a>
            </div>
            @if (DebtsList.Any())
            {
                <div class="debt-list">
                    @foreach (var debt in DebtsList.Take(5))
                    {
                        <div class="debt-item">
                            <span class="debt-desc">@debt.Description</span>
                            <span class="debt-amount">@debt.Amount.ToString("C")</span>
                            <span class="debt-due">@debt.DueDate.ToString("MMM dd")</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-data">No pending debts</div>
            }
        </div>
        <div class="panel financial-chart">
            <div class="panel-header">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="20" x2="12" y2="10"></line>
                    <line x1="18" y1="20" x2="18" y2="4"></line>
                    <line x1="6" y1="20" x2="6" y2="16"></line>
                </svg>
                <h3>Financial Snapshot</h3>
            </div>
            <div class="chart-area">
                <MudChart ChartType="ChartType.Pie" InputData="@ChartData" InputLabels="@ChartLabels" Width="100%" Height="200px" />
            </div>
        </div>
    </section>
</div>

@code {
    private decimal Balance { get; set; }
    private decimal Inflows { get; set; }
    private decimal Outflows { get; set; }
    private decimal Debts { get; set; }
    private List<ExpensesSathi.Models.Transaction> Transactions { get; set; } = new();
    private List<DebtModel> DebtsList { get; set; } = new();
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }

    private double[] ChartData => new double[] { (double)Inflows, (double)Outflows, (double)Debts, (double)Balance };
    private string[] ChartLabels => new string[] { "Inflows", "Outflows", "Debts", "Balance" };

    protected override void OnInitialized()
    {
        UpdateData();
        TransactionService.OnChange += StateHasChanged;
        DebtService.OnChange += StateHasChanged;
    }

    private void UpdateData()
    {
        var transactionBalance = TransactionService.GetAvailableBalance(StartDate, EndDate);
        var pendingDebts = DebtService.GetPendingDebts();
        
        // Balance = Transaction Balance + Pending Debts (money you received from debt)
        // When debt is cleared, it gets subtracted (payment reduces balance)
        Balance = transactionBalance + pendingDebts;
        
        Inflows = TransactionService.GetTotalInflows(StartDate, EndDate);
        Outflows = TransactionService.GetTotalOutflows(StartDate, EndDate);
        Debts = pendingDebts;
        Transactions = TransactionService.GetTransactionsByDateRange(StartDate, EndDate).OrderByDescending(t => t.Date).ToList();
        DebtsList = DebtService.GetAllDebts().Where(d => d.Status == "Pending").ToList();
        StateHasChanged();
    }

    public void Dispose()
    {
        TransactionService.OnChange -= StateHasChanged;
        DebtService.OnChange -= StateHasChanged;
    }
}

<style>
    /* Base Styles */
    :root {
        --primary-color: #6366f1;
        --primary-light: #818cf8;
        --primary-dark: #4f46e5;
        --text-color: #f8fafc;
        --text-secondary: #94a3b8;
        --glass-bg: rgba(255, 255, 255, 0.1);
        --glass-border: rgba(255, 255, 255, 0.2);
        --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        --success-color: #10b981;
        --error-color: #ef4444;
    }

    .main-content {
        padding: 24px;
        background: linear-gradient(135deg, #1e293b, #0f172a);
        min-height: calc(100vh - 70px);
        position: relative;
        overflow: hidden;
    }

    /* Header Styles */
    .main-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .header-icon {
        width: 28px;
        height: 28px;
        stroke: var(--primary-light);
    }

    .header-right .date-picker {
        display: flex;
        gap: 10px;
    }

    .header-right input {
        padding: 8px;
        border: 1px solid var(--glass-border);
        border-radius: 6px;
        background: var(--glass-bg);
        color: var(--text-color);
    }

    h2 {
        font-size: 24px;
        color: var(--text-color);
        font-weight: 600;
    }

    /* Stats Overview */
    .stats-overview {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 10px;
        padding: 16px;
        transition: transform 0.3s;
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-title {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--text-secondary);
        margin-bottom: 8px;
    }

    .stat-title svg {
        width: 18px;
        height: 18px;
    }

    .stat-value {
        font-size: 20px;
        color: var(--text-color);
        font-weight: 700;
        margin-bottom: 8px;
    }

    .stat-trend {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 12px;
    }

    .stat-trend svg {
        width: 14px;
        height: 14px;
    }

    .stat-trend.positive {
        color: var(--success-color);
    }

    .stat-trend.negative {
        color: var(--error-color);
    }

    /* Main Panels */
    .main-panels {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        gap: 20px;
    }

    .panel {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: 10px;
        padding: 16px;
    }

    .panel-header {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 12px;
    }

    .panel-header svg {
        width: 20px;
        height: 20px;
        stroke: var(--primary-light);
    }

    h3 {
        font-size: 16px;
        color: var(--text-color);
        font-weight: 600;
        margin: 0;
    }

    .view-more {
        margin-left: auto;
        color: var(--primary-light);
        text-decoration: none;
        font-size: 12px;
    }

    .view-more:hover {
        color: var(--text-color);
    }

    .transaction-list, .debt-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .transaction-item, .debt-item {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr 1fr;
        padding: 8px;
        border-radius: 6px;
        transition: background-color 0.3s;
    }

    .transaction-item.income {
        background: rgba(16, 185, 129, 0.1);
    }

    .transaction-item.expense {
        background: rgba(239, 68, 68, 0.1);
    }

    .transaction-item:hover, .debt-item:hover {
        background: rgba(255, 255, 255, 0.05);
    }

    .trans-type, .trans-desc, .trans-amount, .trans-date, .debt-desc, .debt-amount, .debt-due {
        font-size: 14px;
        color: var(--text-color);
    }

    .trans-amount {
        font-weight: 600;
    }

    .no-data {
        text-align: center;
        color: var(--text-secondary);
        padding: 20px;
    }

    .chart-area {
        height: 200px;
    }

    /* Responsive Adjustments */
    @@media (max-width: 1024px) {
    .main-content {
        margin-left: 0;
    }

    .stats-overview {
        grid-template-columns: repeat(2, 1fr);
    }

    .main-panels {
        grid-template-columns: 1fr;
    }
    }

    @@media (max-width: 768px) {
    .stats-overview {
        grid-template-columns: 1fr;
    }
    }
</style>